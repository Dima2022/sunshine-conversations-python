# coding: utf-8

"""
    Smooch

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AppUserApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def app_user_device_update(self, user_id, device_id, app_user_device_update, **kwargs):
        """
        Update specified device information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.app_user_device_update(user_id, device_id, app_user_device_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param str device_id: Id of the device. (required)
        :param DeviceUpdate app_user_device_update: Supported properties for an updateAppUserDevice request. (required)
        :return: ClientResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.app_user_device_update_with_http_info(user_id, device_id, app_user_device_update, **kwargs)
        else:
            (data) = self.app_user_device_update_with_http_info(user_id, device_id, app_user_device_update, **kwargs)
            return data

    def app_user_device_update_with_http_info(self, user_id, device_id, app_user_device_update, **kwargs):
        """
        Update specified device information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.app_user_device_update_with_http_info(user_id, device_id, app_user_device_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param str device_id: Id of the device. (required)
        :param DeviceUpdate app_user_device_update: Supported properties for an updateAppUserDevice request. (required)
        :return: ClientResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'device_id', 'app_user_device_update']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_user_device_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `app_user_device_update`")
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `app_user_device_update`")
        # verify the required parameter 'app_user_device_update' is set
        if ('app_user_device_update' not in params) or (params['app_user_device_update'] is None):
            raise ValueError("Missing the required parameter `app_user_device_update` when calling `app_user_device_update`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_user_device_update' in params:
            body_params = params['app_user_device_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/devices/{deviceId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClientResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_app_user_profile(self, user_id, **kwargs):
        """
        Delete specified app users profile.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_app_user_profile(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_app_user_profile_with_http_info(user_id, **kwargs)
        else:
            (data) = self.delete_app_user_profile_with_http_info(user_id, **kwargs)
            return data

    def delete_app_user_profile_with_http_info(self, user_id, **kwargs):
        """
        Delete specified app users profile.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_app_user_profile_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_app_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_app_user_profile`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/profile', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AppUserResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_user(self, user_id, **kwargs):
        """
        Get the specified app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_user(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_user_with_http_info(user_id, **kwargs)
        else:
            (data) = self.get_app_user_with_http_info(user_id, **kwargs)
            return data

    def get_app_user_with_http_info(self, user_id, **kwargs):
        """
        Get the specified app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_user_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_app_user`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AppUserResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_app_user_entity_ids(self, user_id, **kwargs):
        """
        Get specified app users channel entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_user_entity_ids(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_app_user_entity_ids_with_http_info(user_id, **kwargs)
        else:
            (data) = self.get_app_user_entity_ids_with_http_info(user_id, **kwargs)
            return data

    def get_app_user_entity_ids_with_http_info(self, user_id, **kwargs):
        """
        Get specified app users channel entity IDs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_app_user_entity_ids_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_user_entity_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_app_user_entity_ids`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/channels', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AppUserResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def link_app_user(self, user_id, app_user_link, **kwargs):
        """
        Link specified app user to given channel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.link_app_user(user_id, app_user_link, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param AppUserLink app_user_link: Supported properties for a linkAppUser request. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.link_app_user_with_http_info(user_id, app_user_link, **kwargs)
        else:
            (data) = self.link_app_user_with_http_info(user_id, app_user_link, **kwargs)
            return data

    def link_app_user_with_http_info(self, user_id, app_user_link, **kwargs):
        """
        Link specified app user to given channel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.link_app_user_with_http_info(user_id, app_user_link, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param AppUserLink app_user_link: Supported properties for a linkAppUser request. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'app_user_link']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_app_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `link_app_user`")
        # verify the required parameter 'app_user_link' is set
        if ('app_user_link' not in params) or (params['app_user_link'] is None):
            raise ValueError("Missing the required parameter `app_user_link` when calling `link_app_user`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_user_link' in params:
            body_params = params['app_user_link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/channels', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AppUserResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_image_message(self, user_id, source, role, **kwargs):
        """
        Send an image message to the conversation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_image_message(user_id, source, role, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param file source: Image to be uploaded (required)
        :param str role: Role of the sender (required)
        :return: MessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_image_message_with_http_info(user_id, source, role, **kwargs)
        else:
            (data) = self.post_image_message_with_http_info(user_id, source, role, **kwargs)
            return data

    def post_image_message_with_http_info(self, user_id, source, role, **kwargs):
        """
        Send an image message to the conversation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_image_message_with_http_info(user_id, source, role, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param file source: Image to be uploaded (required)
        :param str role: Role of the sender (required)
        :return: MessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'source', 'role']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_image_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_image_message`")
        # verify the required parameter 'source' is set
        if ('source' not in params) or (params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `post_image_message`")
        # verify the required parameter 'role' is set
        if ('role' not in params) or (params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `post_image_message`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source' in params:
            local_var_files['source'] = params['source']
        if 'role' in params:
            form_params.append(('role', params['role']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/images', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MessageResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def pre_create_app_user(self, app_user_pre_create, **kwargs):
        """
        Pre-create an app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_create_app_user(app_user_pre_create, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AppUserPreCreate app_user_pre_create: Supported properties for a preCreateAppUser request. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pre_create_app_user_with_http_info(app_user_pre_create, **kwargs)
        else:
            (data) = self.pre_create_app_user_with_http_info(app_user_pre_create, **kwargs)
            return data

    def pre_create_app_user_with_http_info(self, app_user_pre_create, **kwargs):
        """
        Pre-create an app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_create_app_user_with_http_info(app_user_pre_create, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AppUserPreCreate app_user_pre_create: Supported properties for a preCreateAppUser request. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_user_pre_create']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_create_app_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_user_pre_create' is set
        if ('app_user_pre_create' not in params) or (params['app_user_pre_create'] is None):
            raise ValueError("Missing the required parameter `app_user_pre_create` when calling `pre_create_app_user`")


        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_user_pre_create' in params:
            body_params = params['app_user_pre_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/appusers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AppUserResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def track_event(self, user_id, event, **kwargs):
        """
        Track an event for the given app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.track_event(user_id, event, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param Event event: Supported properties for a trackEvent request. (required)
        :return: TrackEventResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.track_event_with_http_info(user_id, event, **kwargs)
        else:
            (data) = self.track_event_with_http_info(user_id, event, **kwargs)
            return data

    def track_event_with_http_info(self, user_id, event, **kwargs):
        """
        Track an event for the given app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.track_event_with_http_info(user_id, event, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param Event event: Supported properties for a trackEvent request. (required)
        :return: TrackEventResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'event']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method track_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `track_event`")
        # verify the required parameter 'event' is set
        if ('event' not in params) or (params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `track_event`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event' in params:
            body_params = params['event']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/events', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrackEventResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unlink_app_user(self, user_id, channel, **kwargs):
        """
        Unlink specified app user from given channel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unlink_app_user(user_id, channel, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param str channel: Name of the channel. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unlink_app_user_with_http_info(user_id, channel, **kwargs)
        else:
            (data) = self.unlink_app_user_with_http_info(user_id, channel, **kwargs)
            return data

    def unlink_app_user_with_http_info(self, user_id, channel, **kwargs):
        """
        Unlink specified app user from given channel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unlink_app_user_with_http_info(user_id, channel, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param str channel: Name of the channel. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'channel']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_app_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `unlink_app_user`")
        # verify the required parameter 'channel' is set
        if ('channel' not in params) or (params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `unlink_app_user`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'channel' in params:
            path_params['channel'] = params['channel']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}/channels/{channel}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_app_user(self, user_id, app_user_update, **kwargs):
        """
        Update the specified app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_app_user(user_id, app_user_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param AppUserUpdate app_user_update: Supported properties for an updateAppUser request. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_app_user_with_http_info(user_id, app_user_update, **kwargs)
        else:
            (data) = self.update_app_user_with_http_info(user_id, app_user_update, **kwargs)
            return data

    def update_app_user_with_http_info(self, user_id, app_user_update, **kwargs):
        """
        Update the specified app user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_app_user_with_http_info(user_id, app_user_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Identifies the user. Can be either the smoochId or the userId. (required)
        :param AppUserUpdate app_user_update: Supported properties for an updateAppUser request. (required)
        :return: AppUserResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'app_user_update']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_app_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_app_user`")
        # verify the required parameter 'app_user_update' is set
        if ('app_user_update' not in params) or (params['app_user_update'] is None):
            raise ValueError("Missing the required parameter `app_user_update` when calling `update_app_user`")


        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_user_update' in params:
            body_params = params['app_user_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['appToken', 'jwt']

        return self.api_client.call_api('/appusers/{userId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AppUserResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
